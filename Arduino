unsigned long previousMillis = 0;
unsigned long currentMillis;
unsigned long deltaMillis;
#define pwm_A 5
#define dir1 0 //bakåt
#define dir2 4
#define pin 12
int Speed = 0;
float Velocity = 0;
float currentPulses = 0;
float previousPulses = 0;
float deltaPulses = 0;
float revolution = 0;
float circumferenceOfWheels = 12.5;
int BVelocity = 0 ;
float Kp = 9;
float Ki = 0.01;
float e = 0;
float dist = 0;
float summErr= 0;
#include "EspMQTTClient.h"

EspMQTTClient client( 
 "ABB_Indgym",           // Wifi ssid
  "7Laddaremygglustbil",           // Wifi password
  "maqiatto.com",  // MQTT broker ip
  1883,             // MQTT broker port
  "filip.segerberg@abbindustrigymnasium.se",            // MQTT username
  "shrimpen boxar",       // MQTT password
  "Groda",          // Client name
  onConnectionEstablished, // Connection established callback
  true,             // Enable web updater
  true              // Enable debug messages
);
  
ICACHE_RAM_ATTR void hastighet() {//interupten kör funktionen hastighet
  currentPulses +=0.5; 
}

void SpeedCounter(){
  
  currentMillis = millis(); 
  deltaMillis = currentMillis - previousMillis; //tiden mellan mätningar
  deltaPulses = currentPulses - previousPulses; //pulserna mellan mätningar
  revolution = deltaPulses/96; //antalet varv 
  dist = revolution * circumferenceOfWheels; //sträckan

  Velocity = (dist/deltaMillis)*1000; //hastighet m/s
  previousMillis = currentMillis; //nollställer
  previousPulses = currentPulses; //nollställer
  
  e = BVelocity - Velocity; //räcknar ut erroret
  summErr += e*deltaMillis; //intergral för alla error
  Speed = (Kp * e)+(summErr*Ki); //reglering av pwm
  
}
void onConnectionEstablished() //när den connectar
{
  client.subscribe("filip.segerberg@abbindustrigymnasium.se/logger", [] (const String &payload) //subscribar på en payloaden logger
  
  {
  if(payload == "stop car"){ 
    Speed= 0;
    analogWrite(pwm_A, 0);
    }
    
  else {  
    BVelocity = payload.toInt();
    SpeedCounter();
  }  
  
  });
  client.subscribe("filip.segerberg@abbindustrigymnasium.se/Velocity", [] (const String &payload)
  {});  
} 

void setup() {
  Serial.begin(9600);
  pinMode(dir1, OUTPUT);
  pinMode(dir2, OUTPUT);
  pinMode(pwm_A, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(pin), hastighet, CHANGE); //interupten
}

void loop() {
  client.loop();
  SpeedCounter();
  digitalWrite(dir1, HIGH);
  digitalWrite(dir2, LOW);
  analogWrite(pwm_A, Speed);
  delay(10);
  client.publish("filip.segerberg@abbindustrigymnasium.se/Velocity", String(Velocity) ); //skickar hastigheten med mqtt
}   
