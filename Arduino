unsigned long previousMillis = 0;
unsigned long currentMillis;
unsigned long deltaMillis;
#define pwm_A 5
#define dir1 0 //bak√•t
#define dir2 4
#define pin 12
int Speed = 0;
int Speed2= 0;
float Velocity = 0;
float currentPulses = 0;
float previousPulses = 0;
float deltaPulses = 0;
float revolution = 0;
float circumferenceOfWheels = 12.5;
int BVelocity = 0 ;
float Kp = 9;
float Ki = 0.01;
float e = 0;
float dist = 0;
float timeMill; 
float summErr= 0;

#include "EspMQTTClient.h"

void onConnectionEstablished();

EspMQTTClient client(
 "ABB_Indgym",           // Wifi ssid
  "7Laddaremygglustbil",           // Wifi password
  "maqiatto.com",  // MQTT broker ip
  1883,             // MQTT broker port
  "filip.segerberg@abbindustrigymnasium.se",            // MQTT username
  "shrimpen boxar",       // MQTT password
  "Groda",          // Client name
  onConnectionEstablished, // Connection established callback
  true,             // Enable web updater
  true              // Enable debug messages
);


/*void reglering(){
  e = BVelocity - Velocity;
  Speed  = Kp * e;

  }*/
  
ICACHE_RAM_ATTR void hastighet() {
  currentPulses +=0.5;
  //Serial.println("pulse");
}

void SpeedCounter(){
  Serial.println("Speedcounter");
  currentMillis = millis();
  deltaMillis = currentMillis - previousMillis;
  deltaPulses = currentPulses - previousPulses;
  revolution = deltaPulses/96;
  dist = revolution * circumferenceOfWheels;
  Serial.println(dist);
  Serial.println(revolution);
  Velocity = (dist/deltaMillis)*1000;
  previousMillis = currentMillis;
  previousPulses = currentPulses;
  e = BVelocity - Velocity;
  summErr += e*deltaMillis;
  Speed = (Kp * e)+(summErr*Ki);
  
    
  Serial.println(e);
  Serial.println(Speed);
  Serial.println(Velocity );   
  Serial.println("...........");  
  
}
void onConnectionEstablished()
{
  client.subscribe("filip.segerberg@abbindustrigymnasium.se/logger", [] (const String &payload)
  
  {
  Serial.println(payload);

  if(payload == "stop car"){
    Speed= 0;
    analogWrite(pwm_A, 0);
    }
    
  else {  
    BVelocity = payload.toInt();
    SpeedCounter();
  }  
  
  });
  client.subscribe("filip.segerberg@abbindustrigymnasium.se/Velocity", [] (const String &payload)
  {});  
} 

void setup() {
  Serial.begin(9600);
  pinMode(dir1, OUTPUT);
  pinMode(dir2, OUTPUT);
  pinMode(pwm_A, OUTPUT);
  attachInterrupt(digitalPinToInterrupt(pin), hastighet, CHANGE);
}

void loop() {
  client.loop();
  SpeedCounter();
  digitalWrite(dir1, HIGH);
  digitalWrite(dir2, LOW);
  analogWrite(pwm_A, Speed);
  delay(10);
  client.publish("filip.segerberg@abbindustrigymnasium.se/Velocity", String(Velocity) );
}   

